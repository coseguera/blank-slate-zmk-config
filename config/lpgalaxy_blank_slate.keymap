/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define TBLE_ORTHO   1

&mt {
    quick-tap-ms = <200>;
    flavor = "balanced";
};

&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <250>;
};

/ {
    ht: hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
    };
};

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform = &ortho_transform;
    };

    combos {
        compatible = "zmk,combos";
        combo_grave {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp GRAVE>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp TAB>;
        };
        combo_dqt {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp DQT>;
        };
        combo_sqt {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp SQT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
    &kp Q        &kp W &kp E           &kp R          &kp T       &none &none &kp Y       &kp U      &kp I     &kp O         &kp P
    &kp A        &kp S &kp D           &kp F          &kp G       &none &none &kp H       &kp J      &kp K     &kp L         &mt LGUI SEMI
    &ht LSHIFT Z &kp X &kp C           &kp V          &kp B       &none &none &kp N       &kp M      &kp COMMA &mt LCTRL DOT &ht RSHIFT SLASH
    &none        &none &mt LCTRL EQUAL &mt LGUI MINUS &lt 2 ENTER &none &none &lt 1 SPACE &kp BSPC   &kp LALT  &none         &none
            >;
        };

        first_layer {
            bindings = <
    &kp N1   &kp N2   &kp N3   &kp N4   &kp N5    &none &none &kp N6    &kp N7   &kp N8    &kp N9    &kp N0
    &kp EXCL &kp AT   &kp HASH &kp DLLR &kp PRCNT &none &none &kp CARET &kp AMPS &kp ASTRK &kp LPAR  &kp RPAR
    &none    &kp LBKT &kp RBKT &kp LBRC &kp RBRC  &none &none &kp LEFT  &kp DOWN &kp UP    &kp RIGHT &trans
    &none    &none    &trans   &trans   &trans    &none &none &trans    &trans   &trans    &none     &none
            >;
        };

        second_layer {
            bindings = <
    &kp F1 &kp F2     &kp F3 &kp F4  &kp F5  &none &none &mt C_MUTE K_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp C_BRI_DN &kp C_BRI_UP
    &kp F6 &kp F7     &kp F8 &kp F9  &kp F10 &none &none &bt BT(0)         &bt BT(1)    &bt BT(2)    &bt BT(3)    &bt BT(4)
    &none  &bt BT_CLR &none  &kp F11 &kp F12 &none &none &kp HOME          &kp PG_DN    &kp PG_UP    &kp END      &kp BSLH
    &none  &none      &none  &none   &trans  &none &none &trans            &kp DEL      &trans       &none        &none 
            >;
        };

    };
};

